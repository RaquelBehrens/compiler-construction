NUMEXPRESSION -> TERM REC_PLUS_MINUS_TERM (NUMEXPRESSION.code = TERM.code || REC_PLUS_MINUS_TERM.code / REC_PLUS_MINUS_TERM.her = TERM.val / NUMEXPRESSION.val = REC_PLUS_MINUS_TERM.val)

REC_PLUS_MINUS_TERM1 -> PLUS_OR_MINUS TERM REC_PLUS_MINUS_TERM2 (REC_PLUS_MINUS_TERM1.val = new temp; / REC_PLUS_MINUS_TERM1.val = REC_PLUS_MINUS_TERM1.her PLUS_OR_MINUS.code REC_PLUS_MINUS_TERM2.val / REC_PLUS_MINUS_TERM2.her = TERM.val / REC_PLUS_MINUS_TERM1.code = REC_PLUS_MINUS_TERM2.code || TERM.code) | & (REC_PLUS_MINUS_TERM1.code = "")

PLUS_OR_MINUS -> + (PLUS_OR_MINUS.code = +)| - (PLUS_OR_MINUS.code = -)

TERM -> UNARYEXPR REC_UNARYEXPR (TERM.code = REC_UNARYEXPR.code || UNARYEXPR.code / REC_UNARYEXPR.her = UNARYEXPR.val / TERM.val = REC_UNARYEXPR.val)

REC_UNARYEXPR -> UNARYEXPR_OP TERM (REC_UNARYEXPR.val new temp / REC_UNARYEXPR.val =  REC_UNARYEXPR.her UNARYEXPR_OP.op TERM.val)| & (REC_UNARYEXPR.val = REC_UNARYEXPR.her)

UNARYEXPR_OP -> * | / | %

UNARYEXPR -> PLUS_OR_MINUS FACTOR (UNARYEXPR.val new temp / UNARYEXPR.val = PLUS_OR_MINUS.op FACTOR.val) | FACTOR(UNARYEXPR.val = FACTOR.val)

FACTOR -> int_constant (FACTOR.val = lex)
       | float_constant (FACTOR.val = lex)
       | string_constant (FACTOR.val = lex)
       | return_null (FACTOR.val = lex)
       | LVALUE (FACTOR.val = LVALUE.val)
       | ( NUMEXPRESSION ) (FACTOR.val = NUMEXPRESSION.val)

LVALUE -> ident OPT_ALLOC_NUMEXP (LVALUE.val = ident)