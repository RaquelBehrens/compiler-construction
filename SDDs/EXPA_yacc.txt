NUMEXPRESSION -> TERM REC_PLUS_MINUS_TERM (NUMEXPRESSION.val = REC_PLUS_MINUS_TERM.val REC_PLUS_MINUS_TERM.op TERM.val)

REC_PLUS_MINUS_TERM1 -> PLUS_OR_MINUS TERM REC_PLUS_MINUS_TERM2 (REC_PLUS_MINUS_TERM1.op = PLUS_OR_MINUS.op / REC_PLUS_MINUS_TERM1.val = TERM.val REC_PLUS_MINUS_TERM2.op  REC_PLUS_MINUS_TERM2.val) | & (REC_PLUS_MINUS_TERM1.val = 0, REC_PLUS_MINUS_TERM1.op = +)

PLUS_OR_MINUS -> + (PLUS_OR_MINUS.op = lex)| - (PLUS_OR_MINUS.op = lex)

TERM -> UNARYEXPR REC_UNARYEXPR (TERM.val = UNARYEXPR.val REC_UNARYEXPR.op REC_UNARYEXPR.val)

REC_UNARYEXPR -> UNARYEXPR_OP TERM (REC_UNARYEXPR.val = TERM.val / REC_UNARYEXPR.op = UNARYEXPR_OP.op)| & (REC_UNARYEXPR.val = 1 / REC_UNARYEXPR.op = *)

UNARYEXPR_OP -> * (UNARYEXPR_OP.op = '*') | / (UNARYEXPR_OP.op = '/') | % (UNARYEXPR_OP.op = '%')

UNARYEXPR -> PLUS_OR_MINUS FACTOR (UNARYEXPR.val = PLUS_OR_MINUS.op FACTOR.val) | FACTOR(UNARYEXPR.val = FACTOR.val)

FACTOR -> int_constant (FACTOR.val = lex)
       | float_constant (FACTOR.val = lex)
       | string_constant (FACTOR.val = lex)
       | return_null (FACTOR.val = lex)
       | LVALUE (FACTOR.val = LVALUE.val)
       | ( NUMEXPRESSION ) (FACTOR.val = NUMEXPRESSION.val)

LVALUE -> ident OPT_ALLOC_NUMEXP (LVALUE.val = ident)